### Type definitions saved at 2021-10-10T16:03:07.390Z ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  pathPrefix: String
  polyfill: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
  siteUrl: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

type SitePlugin implements Node @derivedTypes @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: SitePluginPluginOptions
  packageJson: SitePluginPackageJson
  subPluginPaths: [String]
}

type SitePluginPluginOptions @derivedTypes {
  plugins: [SitePluginPluginOptionsPlugins]
  defaults: SitePluginPluginOptionsDefaults
  base64Width: Int
  stripMetadata: Boolean
  defaultQuality: Int
  failOnError: Boolean
  bucketName: String
  protocol: String
  hostname: String
  path: String
  pathCheck: Boolean
  allExtensions: Boolean
  isTSX: Boolean
  jsxPragma: String
}

type SitePluginPluginOptionsPlugins {
  resolve: String
  id: String
  name: String
  version: String
  pluginFilepath: String
}

type SitePluginPluginOptionsDefaults {
  quality: Int
  formats: [String]
  placeholder: String
}

type SitePluginPackageJson @derivedTypes {
  name: String
  description: String
  version: String
  main: String
  license: String
  dependencies: [SitePluginPackageJsonDependencies]
  devDependencies: [SitePluginPackageJsonDevDependencies]
  peerDependencies: [SitePluginPackageJsonPeerDependencies]
  keywords: [String]
}

type SitePluginPackageJsonDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonDevDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonPeerDependencies {
  name: String
  version: String
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: []) @dontInfer

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
}

type TestimonialData implements Node @dontInfer {
  localimage: TestimonialDataLocalimage
  logo: String
  name: String
  designation: String
  review: String
  image: String
}

type TestimonialDataLocalimage {
  url: File @link(by: "url")
}

type SiteSettingsData implements Node @derivedTypes @dontInfer {
  data: SiteSettingsDataData
}

type SiteSettingsDataData {
  logo: String
  favicon: String
  title: String
  description: String
  copyright: String
}

type PartnerData implements Node @derivedTypes @dontInfer {
  data: PartnerDataData
}

type PartnerDataData @derivedTypes {
  banner: PartnerDataDataBanner
}

type PartnerDataDataBanner {
  heading: String
  image: String
}

type HomeData implements Node @derivedTypes @dontInfer {
  data: HomeDataData
}

type HomeDataData @derivedTypes {
  banner: HomeDataDataBanner
  firstSection: HomeDataDataFirstSection
  secoundSection: HomeDataDataSecoundSection
  thirdSection: HomeDataDataThirdSection
  fourthSection: HomeDataDataFourthSection
  whyPartners: HomeDataDataWhyPartners
  galleryImages: [HomeDataDataGalleryImages]
}

type HomeDataDataBanner @derivedTypes {
  heading: String
  subheading: String
  buttons: [HomeDataDataBannerButtons]
  bannerImages: [HomeDataDataBannerBannerImages]
}

type HomeDataDataBannerButtons {
  text: String
  url: String
}

type HomeDataDataBannerBannerImages {
  image: String
}

type HomeDataDataFirstSection {
  heading: String
  description: String
  type: String
  url: String
}

type HomeDataDataSecoundSection {
  heading: String
  description: String
  type: String
  url: String
}

type HomeDataDataThirdSection {
  heading: String
  description: String
  type: String
  url: String
}

type HomeDataDataFourthSection {
  heading: String
  description: String
  type: String
  url: String
}

type HomeDataDataWhyPartners @derivedTypes {
  heading: String
  allListing: [HomeDataDataWhyPartnersAllListing]
}

type HomeDataDataWhyPartnersAllListing {
  title: String
  description: String
  link: String
}

type HomeDataDataGalleryImages {
  image: String
}

type ContactData implements Node @derivedTypes @dontInfer {
  banner: ContactDataBanner
  contactDetails: ContactDataContactDetails
}

type ContactDataBanner {
  heading: String
  image: String
}

type ContactDataContactDetails {
  number: String
  emailID: String
  address: String
  zoneNumbers: [String]
  googleMapLink: String
  footerDescription: String
}

type CommercialData implements Node @derivedTypes @dontInfer {
  data: CommercialDataData
}

type CommercialDataData @derivedTypes {
  banner: CommercialDataDataBanner
  firstSection: CommercialDataDataFirstSection
  secoundSection: CommercialDataDataSecoundSection
  thirdSection: CommercialDataDataThirdSection
  professionalPhotos: CommercialDataDataProfessionalPhotos
  floorPlan: CommercialDataDataFloorPlan
  virtualTour: CommercialDataDataVirtualTour
  firstSectionexperienceCenter: CommercialDataDataFirstSectionexperienceCenter
  secondSectionexperienceCenter: CommercialDataDataSecondSectionexperienceCenter
  thirdSectionexperienceCenter: CommercialDataDataThirdSectionexperienceCenter
  fourthSectionexperienceCenter: CommercialDataDataFourthSectionexperienceCenter
  ourProcess: CommercialDataDataOurProcess
}

type CommercialDataDataBanner {
  heading: String
  subheading: String
  image: String
}

type CommercialDataDataFirstSection {
  heading: String
  description: String
  fileType: String
  url: String
}

type CommercialDataDataSecoundSection {
  heading: String
  description: String
  fileType: String
  url: String
}

type CommercialDataDataThirdSection {
  heading: String
  description: String
  fileType: String
  url: String
}

type CommercialDataDataProfessionalPhotos @derivedTypes {
  heading: String
  description: String
  images: [CommercialDataDataProfessionalPhotosImages]
}

type CommercialDataDataProfessionalPhotosImages {
  images: String
}

type CommercialDataDataFloorPlan {
  heading: String
  description: String
  originalImage: String
  modifiedImage: String
}

type CommercialDataDataVirtualTour {
  heading: String
  description: String
  fileType: String
  url: String
}

type CommercialDataDataFirstSectionexperienceCenter {
  heading: String
  description: String
  fileType: String
  url: String
}

type CommercialDataDataSecondSectionexperienceCenter {
  heading: String
  description: String
  originalImage: String
  modifiedImage: String
}

type CommercialDataDataThirdSectionexperienceCenter {
  heading: String
  description: String
  fileType: String
  url: String
}

type CommercialDataDataFourthSectionexperienceCenter {
  heading: String
  description: String
  fileType: String
  url: String
}

type CommercialDataDataOurProcess @derivedTypes {
  heading: String
  subheading: String
  image: String
  processList: [CommercialDataDataOurProcessProcessList]
}

type CommercialDataDataOurProcessProcessList {
  process: String
}

type ClientData implements Node @derivedTypes @dontInfer {
  heading: String
  image: String
  clientsList: [ClientDataClientsList]
}

type ClientDataClientsList {
  category: String
  img: String
  title: String
}

type AboutData implements Node @derivedTypes @dontInfer {
  data: AboutDataData
}

type AboutDataData @derivedTypes {
  banner: AboutDataDataBanner
  aboutDetails: AboutDataDataAboutDetails
  spaceOwner: AboutDataDataSpaceOwner
  clients: AboutDataDataClients
  ourTeam: AboutDataDataOurTeam
}

type AboutDataDataBanner {
  heading: String
  image: String
}

type AboutDataDataAboutDetails {
  description: String
  image1: String
  image2: String
  image3: String
}

type AboutDataDataSpaceOwner @derivedTypes {
  heading: String
  feature: [AboutDataDataSpaceOwnerFeature]
}

type AboutDataDataSpaceOwnerFeature {
  heading: String
}

type AboutDataDataClients @derivedTypes {
  heading: String
  feature: [AboutDataDataClientsFeature]
}

type AboutDataDataClientsFeature {
  heading: String
}

type AboutDataDataOurTeam @derivedTypes {
  heading: String
  teamlist: [AboutDataDataOurTeamTeamlist]
}

type AboutDataDataOurTeamTeamlist {
  name: String
  designation: String
  location: String
  img: String
}